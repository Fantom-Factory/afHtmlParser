
// PEG Rules for parsing well formed HTML 5 documents 

html						<- bom? blurb* doctype? xmlProlog? blurb* element blurb*
bom							<- "ï»¿"
xmlProlog					<- "<?xml" (!"?>" .)+ "?>"

// ---- Doctype ----

doctype						<- "<!DOCTYPE" [ \t]+ doctypeName:[a-zA-Z0-9]+ (doctypePublicId / doctypeSystemId)* [ \t]* ">"
doctypePublicId				<- [ \t]+ "PUBLIC" [ \t]+ (("\"" publicId:[^"]* "\"") / ("'" publicId:[^']* "'"))
doctypeSystemId				<- [ \t]+ ("SYSTEM" [ \t]+)? (("\"" systemId:[^"]* "\"") / ("'" systemId:[^']* "'"))

// ---- Elements ----

element						<- voidElement / rawTextElement / escapableRawTextElement / selfClosingElement / normalElement
voidElement					<- "<"  voidTag:voidElementName attributes ">"
rawTextElement				<- "<" startTag:rawTextElementName attributes ">" rawTextContent endElement
escapableRawTextElement		<- "<" startTag:escapableRawTextElementName attributes ">" escapableRawTextContent endElement
selfClosingElement			<- "<"  voidTag:elementName attributes "/>"
normalElement				<- "<" startTag:elementName attributes ">" normalContent? endElement
endElement					<- "</"  endTag:elementName ">"

elementName					<- [a-zA-Z] [^\t\n\f />]*
voidElementName				<- "area" / "base" / "br" / "col" / "embed" / "hr" / "img" / "input" / "keygen" / "link" / "meta" / "param" / "source" / "track" / "wbr"
rawTextElementName			<- "script" / "style"
escapableRawTextElementName	<- "textarea" / "title"

rawTextContent				<- (!("</script>" / "</style>") .)+
escapableRawTextContent		<- (text:(!("</textarea>" / "</title>" / "&") .)+ / charRef)*
normalContent				<- !"</" (tagText:(text:[^<&]+ / charRef) / comment / cdata / element)*

// ---- Attributes ----

attributes					<- (&[^/>] ([ \t]+ / attr:doubleQuoteAttr / attr:singleQuoteAttr / attr:unquotedAttr / emptyAttr))*
attrName					<- [^ \t\n\r\f"'>/=]+
emptyAttr					<- attrName+
unquotedAttr				<- attrName [ \t]* "=" [ \t]* attrValue:(text:[^ \t\n\r\f"'=<>`&]+ / charRef)+
singleQuoteAttr				<- attrName [ \t]* "=" [ \t]* "'" attrValue:(text:[^'&]+ / charRef)* "'"
doubleQuoteAttr				<- attrName [ \t]* "=" [ \t]* "\"" attrValue:(text:[^"&]+ / charRef)* "\""

// ---- Character References ----

charRef						<- &"&" (decNumCharRef / hexNumCharRef / namedCharRef / borkedRef)
namedCharRef				<- "&" [^;>]+ ";"
decNumCharRef				<- "&#" [0-9]+ ";"
hexNumCharRef				<- "&#x" [a-fA-F0-9]+ ";"
borkedRef					<- "&" &[ \t]

// ---- Misc ----

cdata						<- "<![CDATA[" (!"]]>" .)+ "]]>"
comment						<- "<!--" (!"--" .)+ "-->"
blurb						<- [ \t]+ / comment
