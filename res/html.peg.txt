
// PEG Rules for parsing well formed HTML 5 documents 
// https://html.spec.whatwg.org/multipage/syntax.html

html				= bom? blurb* doctype? blurb* xmlProlog? blurb* elem blurb*
bom					= "\uFEFF"
xmlProlog			= "<?xml" (!"?>" .)+ "?>"

// ---- Doctype ----

doctype				= "<!DOCTYPE" [ \t\n\f\r]+ doctypeElem:[a-zA-Z0-9]+ (doctypePublicId / doctypeSystemId)* [ \t\n\f\r]* ">"
doctypePublicId		= [ \t\n\f\r]+  "PUBLIC" [ \t\n\f\r]+   (("\"" publicId:[^"]* "\"") / ("'" publicId:[^']* "'"))
doctypeSystemId		= [ \t\n\f\r]+ ("SYSTEM" [ \t\n\f\r]+)? (("\"" systemId:[^"]* "\"") / ("'" systemId:[^']* "'"))

// ---- Elems ----

elem				= voidElem / rawTextElem / escRawTextElem / selfClosingElem / normalElem
voidElem			= "<"  voidTag:voidElemName       attributes  ">"
rawTextElem			= "<" startTag:rawTextElemName    attributes  ">" rawTextContent endElem
escRawTextElem		= "<" startTag:escRawTextElemName attributes  ">" escRawTextContent endElem
selfClosingElem		= "<"  voidTag:elemName           attributes "/>"
normalElem			= "<" startTag:elemName           attributes  ">" normalContent? endElem?
endElem				= "</"  endTag:elemName                       ">"

elemName			= [a-zA-Z] [^\t\n\f />]*
voidElemName		= "area" / "base" / "br" / "col" / "embed" / "hr" / "img" / "input" / "keygen" / "link" / "meta" / "param" / "source" / "track" / "wbr"
rawTextElemName		= "script" / "style"
escRawTextElemName	= "textarea" / "title"

rawTextContent		= (!("</script>" / "</style>") .)+
escRawTextContent	= (text:(!("</textarea>" / "</title>" / "&") .)+ / charRef)*
normalContent		= !"</" (tagText:(text:[^<&]+ / charRef) / comment / cdata / elem)*

// ---- Attributes ----

attributes			= (&[^/>] ([ \t]+ / attr:doubleQuoteAttr / attr:singleQuoteAttr / attr:unquotedAttr / emptyAttr))*
attrName			= [^ \t\n\r\f"'>/=]+
emptyAttr			= attrName+
unquotedAttr		= attrName [ \t]* "=" [ \t]*      attrValue:(charRef / text:[^ \t\n\r\f"'=<>`&]+)+
singleQuoteAttr		= attrName [ \t]* "=" [ \t]* "'"  attrValue:(charRef / text:[^'&]+)* "'"
doubleQuoteAttr		= attrName [ \t]* "=" [ \t]* "\"" attrValue:(charRef / text:[^"&]+)* "\""

// ---- Character References ----

charRef				= &"&" (decNumCharRef / hexNumCharRef / namedCharRef / borkedRef)
namedCharRef		= "&"   [^;>]+ ";"
decNumCharRef		= "&#"  [0-9]+ ";"
hexNumCharRef		= "&#x" [a-fA-F0-9]+ ";"
borkedRef			= "&"  &[ \t]

// ---- Misc ----

cdata				= "<![CDATA[" (!"]]>" .)+ "]]>"
comment				= "<!--" (!"--" .)+ "-->"
blurb				= [ \t\n\f\r]+ / comment
